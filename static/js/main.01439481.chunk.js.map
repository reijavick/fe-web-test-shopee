{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Component","Boolean","window","location","hostname","match","ListItem","props","react_default","a","createElement","class","cur","value","nominal","toLocaleString","undefined","maximumFractionDigits","onClick","AddCurrencies","style","addButtonStyle","onSubmit","submitStyle","onChange","option","type","Forex","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rates","shownIndex","unshownIndex","hideAddButton","handleChange","bind","assertThisInitialized","handleSubmit","_this2","fetch","then","results","json","setState","toConsumableArray","Array","keys","length","i","_this3","handleDelete","values","_this4","display","map","handleClickAddButton","event","target","index","indexOf","splice","push","preventDefault","_this5","showLis","renderItems","align","pattern","placeholder","onBlur","renderButton","React","ReactDOM","render","src_Forex","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01439481.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container,\n    Row,\n    Col,\n    Jumbotron,\n    Button\n} from 'reactstrap';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n    render() {\n        return (\n            <div>\n                <Navbar color=\"inverse\" light expand=\"md\">\n                    <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\n                    <NavbarToggler onClick={this.toggle} />\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"/components/\">Components</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/reactstrap/reactstrap\">Github</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n                <Jumbotron>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <h1>Welcome to React</h1>\n                                <p>\n                                    <Button\n                                        tag=\"a\"\n                                        color=\"success\"\n                                        size=\"large\"\n                                        href=\"http://reactstrap.github.io\"\n                                        target=\"_blank\"\n                                    >\n                                        View Reactstrap Docs\n                                    </Button>\n                                </p>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Jumbotron>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction ListItem(props){\n\treturn(\n\t\t<div class=\"list-item\">\n\t\t\t<div class=\"item-details\">\n\t\t\t\t<div class=\"first-line\">\n\t\t\t\t\t<div>{props.cur}</div>\n\t\t\t\t\t{(props.value * props.nominal).toLocaleString(undefined, {maximumFractionDigits:4})}\n\t\t\t\t</div>\n\t\t\t\t<div class=\"second-line\">\n\t\t\t\t\tXXX - ABCDEFGHIJK\n\t\t\t\t</div>\n\t\t\t\t<div class=\"third-line\">\n\t\t\t\t\t1 USD = {props.cur} {props.value}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<button onClick={props.onClick}>(-)</button>\n\t\t</div>\n\t);\n}\n\nfunction AddCurrencies(props){\n\treturn(\n\t\t<div>\n\t\t\t<button onClick={props.onClick} style={props.addButtonStyle}>\n\t\t\t\t(+) Add More Currencies\n\t\t\t</button>\n\n\t\t\t<form onSubmit={props.onSubmit} style={props.submitStyle}>\n\t\t\t\t<select value={props.value} onChange={props.onChange}>\n\t\t\t\t\t{props.option}\n\t\t\t\t</select>\n\t\t\t\t<input type=\"submit\" value=\"Submit\"></input>\n\t\t\t</form>\n\t\t</div>\n\t\t);\n}\n\nclass Forex extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trates: [],\n\t\t\tshownIndex: [], //index of rates to be listed/shown\n\t\t\tunshownIndex: [], //index of unshown\n\t\t\tnominal: 1, //base value\n\t\t\thideAddButton: false,\n\t\t\tvalue: 0\n\t\t}\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\tcomponentWillMount() {\n\t\tfetch(\"https://api.exchangeratesapi.io/latest?base=USD\")\n\t\t.then(results => {\n\t\t\treturn results.json();\n\t\t}).then(\n\t\t\t(results) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\trates: results.rates,\n\t\t\t\t\tunshownIndex: [...Array(Object.keys(results.rates).length).keys()],\n\t\t\t\t});\n\t\t\t}\n\t\t)\n\t}\n\n\trenderItems(i){\n\t\t//generate each selected currencies as in shownIndex\n\t\treturn(\n\t\t\t<ListItem \n\t\t\tonClick = {() => this.handleDelete(i)}\n\t\t\tcur = {Object.keys(this.state.rates)[i]}\n\t\t\tvalue = {Object.values(this.state.rates)[i]}\n\t\t\tnominal = {this.state.nominal}\n\t\t\t/>\n\t\t);\n\n\t}\n\n\trenderButton(){\n\t\t//handles addcurrency button \n\t\tconst addButtonStyle = this.state.hideAddButton ? {display: 'none'} : {};\n\t\tconst submitStyle = this.state.hideAddButton ? {} :{display: 'none'};\n\n\t\t//options from select option tag\n\t\tconst option = this.state.unshownIndex.map(i =>\n\t\t\t\t<option value={i}>{Object.keys(this.state.rates)[i]}</option>\n\t\t\t);\n\n\t\treturn(\n\t\t\t<AddCurrencies \n\t\t\tonClick = {() => this.handleClickAddButton()}\n\t\t\taddButtonStyle = {addButtonStyle}\n\n\t\t\tsubmitStyle = {submitStyle}\n\t\t\toption = {option}\n\t\t\tvalue = {this.state.value}\n\t\t\tonChange = {(event) => this.handleChange(event)}\n\t\t\tonSubmit = {(event) => this.handleSubmit(event)}\n\t\t\t/>\n\t\t);\n\t}\n\n\thandleChange(event){\n\t\tthis.setState({value: event.target.value});\n\t}\n\n\thandleSubmit(event){\n\t\t//move the selected currency index from unshownIndex array to shownIndex array\n\t\tconst unshownIndex = [...this.state.unshownIndex];\n\t\tconst shownIndex = [...this.state.shownIndex];\n\n\t\t\n\t\tconst index = unshownIndex.indexOf(this.state.value);\n\t\tunshownIndex.splice(index,1);\n\t\tshownIndex.push(this.state.value);\n\t\t\n\t\tthis.setState({\n\t\t\tunshownIndex: unshownIndex,\n\t\t\tshownIndex: shownIndex,\n\t\t\thideAddButton: false\n\t\t});\n\t\tevent.preventDefault();\n\t}\n\n\thandleClickAddButton(){\n\t\t//hid addCurrency button, shows select option\n\t\t\n\t\tthis.setState({\n\t\t\thideAddButton: true,\n\t\t\tvalue: this.state.unshownIndex[0]\n\t\t});\n\t}\n\n\thandleDelete(i){\n\t\t//move selected currency's index from shownIndex to unshownIndex\n\t\tconst shownIndex = [...this.state.shownIndex];\n\t\tconst unshownIndex = [...this.state.unshownIndex];\n\t\t\n\t\tconst index = shownIndex.indexOf(i);\n\t\tshownIndex.splice(index,1);\n\t\tunshownIndex.push(i);\n\n\t\tthis.setState({\n\t\t\tshownIndex: shownIndex,\n\t\t\tunshownIndex: unshownIndex\n\t\t});\n\t}\n\n\tonBlur(event){\n\t\t//triggers after user loose focus \n\t\tthis.setState({nominal: event.target.value});\n\t}\n\n\trender() {\n\t\t//list of currencies to be shown\n\t\tconst showLis = this.state.shownIndex.map(i =>\n\t\t\t\t<div>{this.renderItems(i)} </div>\n\t\t\t);\n\t\t//list of currencies currently not shown\n\t\tconst option = this.state.unshownIndex.map(i =>\n\t\t\t\t<option value={i}>{Object.keys(this.state.rates)[i]}</option>\n\t\t\t);\n\n\t\treturn (\n\t\t\t<div class=\"mainpage\" align=\"center\">\n\t\t\t\t<div class=\"main-header\">\n\t\t\t\t\t<div class=\"header-firstline\">USD-United States Dollar</div>\n\t\t\t\t\t<div class=\"header-secondline\">\n\t\t\t\t\t\t<div>USD</div>\n\t\t\t\t\t\t<div><input class=\"nominal-input\" type=\"text\" pattern=\"[0-9]*\" placeholder='1' onBlur={this.onBlur.bind(this)}/></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{showLis}\n\t\t\t\t<div class=\"list-item\">\n\t\t\t\t\t{this.renderButton()}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>\t\t\t\n\t\t);\n\t}\n}\n\n\n\n\n\n\n\n\n\nReactDOM.render(\n\t<Forex />, \n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}